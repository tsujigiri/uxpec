(
  A collection of tests to be performed on the stack

  Consumes the result of some operation from the stack and prints an indication
  of whether the test was successful or not according to the assertion used.

  <result> --
)
@assert
	( check for a non-zero byte on the stack )
	&true
		?&success
		!&fail

	&false
		?&fail
		!&success

	&equ
		EQU
		!&true

	&equ2
		EQU2
		!&true

	&stack-empty
		uxpec/backup-system-vector
		;assert/stack-empty-catch #00 DEO2
		POPk
		uxpec/restore-system-vector
		!&fail
		&stack-empty-catch
			uxpec/restore-system-vector
			POP2 POP2
			!&success

	&success
		!&return

	&fail
		#01 ;uxpec/assert-failed STA
		#01 ;uxpec/assert-failed-global STA
		!&return

	&return
		#01 ;uxpec/assert-called STA
		JMP2r

@uxpec-exit
	;uxpec/assert-failed-global LDA ?&fail !&succeed
	&fail #010f DEO BRK
	&succeed #800f DEO BRK

@describe
@context
	uxpec/indent
	STH2r uxpec/print
	#0a18 DEO ( \n )
	;uxpec/indent-level LDA INC ;uxpec/indent-level STA
	JMP2

( prints the address of the describe string and its own )
@it
	uxpec/indent
	STH2r uxpec/print
	;uxpec/indent-level LDA INC ;uxpec/indent-level STA
	JMP2

@end
	;uxpec/indent-level LDA #01 SUB ;uxpec/indent-level STA
	;uxpec/assert-called LDA ?&indicate-status !&return
	&indicate-status
		#00 ;uxpec/assert-called STA
		;uxpec/assert-failed LDA ?&fail !&success
		&fail ;uxpec/assert-fail-symbol uxpec/print POP2 !&return
		&success ;uxpec/assert-success-symbol uxpec/print POP2

	&return
		#00 ;uxpec/assert-failed STA
		JMP2r

@uxpec
	&assert-success-symbol 20 f0 9f 91 8c 0a 00
	&assert-fail-symbol    20 f0 9f 94 a5 0a 00
	&assert-failed 00
	&assert-called 00
	&assert-failed-global 00


	(
		prints a null-terminated string from the absolute address on the stack and
		jumps back to the address on the return stack
	)
	&print
		LDAk DUP ?&print-char
		POP INC2 JMP2r
		&print-char
			#18 DEO INC2 !&print

	&indent
		,&indent-level LDR
		&indent-loop
			DUP #00 EQU ?&return
			#0918 DEO ( \t )
			#01 SUB
			!&indent-loop
		&return POP JMP2r

	&indent-level 00

	&backup-system-vector
		#00 DEI2 ,&system-vector-backup STR2
		JMP2r

	&restore-system-vector
		,&system-vector-backup LDR2 #00 DEO2
		JMP2r

	&system-vector-backup 0000

	&create-stack-snapshot
		,&next-stack-stack-addr JSR
		,&backup-system-vector JSR
		;uxpec/create-stack-snapshot-catch #00 DEO2
		&create-stack-snapshot-loop
			STAk INC2 DUP2 ,&stack-stack-ptr STR2 ROT POP
			!&create-stack-snapshot-loop
		&create-stack-snapshot-catch
			,&restore-system-vector JSR
			POP2 POP2
			,&stack-stack-ptr LDR2 DUP2 ,&stack-stack-ptr-old LDR2
			SUB2 SWP2 STA POP

			( copy back onto stack )
			;uxpec/stack-stack-ptr LDA2
			LDAk STH ( load stack size and move to return stack )
			&restore-stack-loop
				STHkr #00 EQU ?&skip-restore-stack-loop
				#0001 SUB2 ( decrement stack ptr )
				LDAk ROT ROT ( push value onto stack )
				LITr 01 SUBr
				!&restore-stack-loop ( decrement stack size counter )
			&skip-restore-stack-loop
			POPr POP2 JMP2r

	&next-stack-stack-addr
		,&stack-stack-ptr LDR2
		DUP2 #0000 EQU2 ?&init-stack-stack-ptr
		INC2
		DUP2 ,&stack-stack-ptr-old STR2
		JMP2r
		&init-stack-stack-ptr
			POP2 ;uxpec/stack-stack
			DUP2 ,&stack-stack-ptr STR2
			DUP2 ,&stack-stack-ptr-old STR2
		JMP2r

	( it's stacks all the way )
	&stack-stack-ptr $2
	&stack-stack-ptr-old $2
	&stack-stack $1024
